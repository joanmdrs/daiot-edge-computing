import cv2
import face_recognition
import numpy as np
import time
import os
import paho.mqtt.client as mqtt
import json
import csv
from datetime import datetime
import threading
import tkinter as tk
from tkinter import ttk, messagebox
from PIL import Image, ImageTk

# ====================================================================
# --- 1. CONFIGURA√á√ïES DA APLICA√á√ÉO ---
# ====================================================================

# Configura√ß√µes MQTT
MQTT_BROKER_IP = "192.168.1.10"
MQTT_PORT = 1883
MQTT_USER = "usermqtt"
MQTT_PASS = "passmqtt"
MQTT_TOPIC_STATE = "face_recognition/status"
MQTT_TOPIC_DISCOVERY = "homeassistant/sensor/facial_recognition_cam/status/config"

# Diret√≥rio para as imagens de pessoas conhecidas
KNOWN_FACES_DIR = "known_faces"

# Configura√ß√£o do arquivo de log
LOG_FILE = "recognition_history.csv"

# ====================================================================
# --- 2. CLASSE DA L√ìGICA DE RECONHECIMENTO (BACKEND) ---
# ====================================================================

class FaceRecognitionBackend:
    """Gerencia a l√≥gica de reconhecimento facial e comunica√ß√£o MQTT."""
    def __init__(self, update_gui_callback):
        self.update_gui_callback = update_gui_callback
        self.running = False
        self.known_face_encodings = []
        self.known_face_names = []
        self.last_recognized_name = None
        self.video_capture = None
        self.client = None
        self.current_frame = None

        self.load_known_faces()
        self.ensure_log_file_exists()
        self.setup_mqtt_client()
        
    def load_known_faces(self):
        """Carrega os rostos conhecidos a partir do diret√≥rio de imagens."""
        print(f"üîÑ Carregando rostos conhecidos da pasta '{KNOWN_FACES_DIR}'...")
        if not os.path.exists(KNOWN_FACES_DIR):
            print(f"‚ùå Erro: Diret√≥rio '{KNOWN_FACES_DIR}' n√£o encontrado.")
            return
            
        for filename in os.listdir(KNOWN_FACES_DIR):
            if filename.endswith(('.jpg', '.jpeg', '.png')):
                name = os.path.splitext(filename)[0]
                image_path = os.path.join(KNOWN_FACES_DIR, filename)
                try:
                    image = face_recognition.load_image_file(image_path)
                    encodings = face_recognition.face_encodings(image)
                    if encodings:
                        self.known_face_encodings.append(encodings[0])
                        self.known_face_names.append(name.replace('_', ' ').title())
                        print(f"‚úÖ Rosto de '{name}' carregado.")
                    else:
                        print(f"‚ö†Ô∏è Aviso: Nenhum rosto encontrado em '{filename}'.")
                except Exception as e:
                    print(f"‚ùå Erro ao carregar '{filename}': {e}")
        
        if not self.known_face_encodings:
            print("‚ùó Nenhum rosto v√°lido foi carregado.")
        else:
            print(f"üéâ Carregamento conclu√≠do. Total: {len(self.known_face_names)}")
    
    def ensure_log_file_exists(self):
        """Garante que o arquivo de log CSV existe e tem um cabe√ßalho."""
        if not os.path.exists(LOG_FILE):
            try:
                with open(LOG_FILE, mode='w', newline='') as file:
                    writer = csv.writer(file)
                    writer.writerow(['timestamp', 'name'])
                    print(f"üìÑ Arquivo de log '{LOG_FILE}' criado.")
            except PermissionError:
                print(f"‚ùå Erro de Permiss√£o: N√£o foi poss√≠vel criar/escrever em '{LOG_FILE}'. O arquivo pode estar aberto ou voc√™ precisa de permiss√µes de Administrador.")
                # N√£o saia do programa, apenas desative o log
                self.log_recognition_event = lambda name: None 

    def log_recognition_event(self, name):
        """Registra o nome, a data e a hora no arquivo de log CSV."""
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        with open(LOG_FILE, mode='a', newline='') as file:
            writer = csv.writer(file)
            writer.writerow([timestamp, name])
        print(f"‚úçÔ∏è Log registrado: {timestamp} - {name}")

    def setup_mqtt_client(self):
        """Configura e conecta o cliente MQTT."""
        # CORRE√á√ÉO: Usando a vers√£o de API 2 para evitar o aviso de deprecia√ß√£o
        self.client = mqtt.Client(callback_api_version=mqtt.CallbackAPIVersion.VERSION2)
        self.client.username_pw_set(MQTT_USER, MQTT_PASS)
        self.client.on_connect = self.on_connect_callback
        try:
            self.client.connect(MQTT_BROKER_IP, MQTT_PORT, 60)
            self.client.loop_start()
        except Exception as e:
            print(f"‚ùå Erro de conex√£o MQTT: {e}")
            self.update_gui_callback("status_update", "‚ùå Erro de conex√£o MQTT!", "red")

    def on_connect_callback(self, client, userdata, flags, rc):
        """Callback chamado quando o cliente MQTT se conecta."""
        if rc == 0:
            print("‚úÖ Conectado ao broker MQTT!")
            self.publish_discovery_payload()
            # CORRE√á√ÉO: A atualiza√ß√£o da GUI √© agendada para a thread principal
            self.update_gui_callback("status_update", "‚úÖ Conectado ao MQTT!", "green")
        else:
            print(f"‚ùå Falha na conex√£o MQTT. C√≥digo: {rc}")
            self.update_gui_callback("status_update", f"‚ùå Falha MQTT ({rc})", "red")

    def publish_discovery_payload(self):
        """Publica a mensagem de descoberta para o Home Assistant."""
        payload = json.dumps({
            "name": "√öltimo Rosto Reconhecido",
            "state_topic": MQTT_TOPIC_STATE,
            "unique_id": "face_recognition_cam_status",
            "icon": "mdi:face-recognition",
            "device": {
                "identifiers": ["facial_recognition_cam_01"],
                "name": "C√¢mera de Reconhecimento Facial",
                "model": "PC Webcam",
                "manufacturer": "DIY"
            }
        })
        self.client.publish(MQTT_TOPIC_DISCOVERY, payload, retain=True)
        print("üöÄ Payload de descoberta publicado!")
    
    def start_camera(self):
        """Tenta abrir a c√¢mera."""
        print("üé• Abrindo a c√¢mera...")
        self.video_capture = cv2.VideoCapture(0)
        if not self.video_capture.isOpened():
            print("‚ùå Erro: N√£o foi poss√≠vel abrir a c√¢mera. Verifique as conex√µes.")
            self.update_gui_callback("status_update", "‚ùå Erro na C√¢mera!", "red")
            return False
        print("‚úÖ C√¢mera aberta com sucesso.")
        self.running = True
        return True

    def stop_camera(self):
        """Para o loop de v√≠deo e libera a c√¢mera."""
        self.running = False
        if self.video_capture is not None and self.video_capture.isOpened():
            self.video_capture.release()
            print("‚úÖ C√¢mera liberada.")
        self.update_gui_callback("status_update", "üî¥ Parado", "red")
        
    def video_loop(self):
        """Loop de processamento de v√≠deo em um thread separado."""
        if not self.start_camera():
            return

        self.update_gui_callback("status_update", "üü¢ Rodando", "green")
        self.update_gui_callback("name_update", "Aguardando reconhecimento...")

        while self.running:
            ret, frame = self.video_capture.read()
            if not ret:
                print("‚ö†Ô∏è N√£o foi poss√≠vel ler o frame da c√¢mera. Tentando novamente...")
                continue
            
            # Atualiza o frame para a GUI
            self.current_frame = frame.copy()

            # Processamento de reconhecimento
            scale_factor = 0.25
            small_frame = cv2.resize(frame, (0, 0), fx=scale_factor, fy=scale_factor)
            rgb_small_frame = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)
            
            face_locations = face_recognition.face_locations(rgb_small_frame)
            face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)
            
            current_recognized_name = "Nenhum Rosto Detectado"
            
            for _, face_encoding in zip(face_locations, face_encodings):
                matches = face_recognition.compare_faces(self.known_face_encodings, face_encoding)
                if True in matches:
                    first_match_index = matches.index(True)
                    current_recognized_name = self.known_face_names[first_match_index]
                    break
                else:
                    current_recognized_name = "Desconhecido"

            if current_recognized_name != self.last_recognized_name:
                self.client.publish(MQTT_TOPIC_STATE, current_recognized_name)
                print(f"üì¶ MQTT: Publicando '{current_recognized_name}'")
                
                # Chamada para o m√©todo de log
                self.log_recognition_event(current_recognized_name) 
                
                self.last_recognized_name = current_recognized_name
                self.update_gui_callback("name_update", f"Reconhecido: {current_recognized_name}")

        self.stop_camera()

    def shutdown(self):
        """Libera os recursos da c√¢mera e desconecta o cliente MQTT."""
        print("üëã Encerrando a aplica√ß√£o...")
        self.stop_camera()
        if self.client:
            self.client.loop_stop()
            self.client.disconnect()
            print("‚úÖ Cliente MQTT desconectado.")


# ====================================================================
# --- 3. CLASSE DA INTERFACE GR√ÅFICA (FRONTEND) ---
# ====================================================================

class FaceRecognitionGUI(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("Reconhecimento Facial")
        self.geometry("800x600")
        
        # Cria a inst√¢ncia do backend e passa o callback para a GUI
        self.backend = FaceRecognitionBackend(self.update_gui)
        
        self.create_widgets()
        self.camera_thread = None
        self.update_frame_display()
        self.protocol("WM_DELETE_WINDOW", self.on_closing)
        
    def create_widgets(self):
        # Frame de controle
        control_frame = ttk.Frame(self, padding="10")
        control_frame.pack(fill=tk.X)
        
        self.start_button = ttk.Button(control_frame, text="Iniciar Reconhecimento", command=self.start_recognition)
        self.start_button.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.stop_button = ttk.Button(control_frame, text="Parar", command=self.stop_recognition, state=tk.DISABLED)
        self.stop_button.pack(side=tk.LEFT, padx=5, pady=5)
        
        self.status_label = ttk.Label(control_frame, text="üî¥ Aguardando Iniciar", font=("Helvetica", 12))
        self.status_label.pack(side=tk.RIGHT, padx=10)

        # Label para mostrar o status do reconhecimento
        self.name_label = ttk.Label(self, text="Status: Pronto", font=("Helvetica", 14, "bold"), foreground="blue")
        self.name_label.pack(pady=10)

        # Label para exibir o feed da c√¢mera
        self.video_label = tk.Label(self, bd=2, relief="sunken")
        self.video_label.pack(pady=10)

    def start_recognition(self):
        """Inicia o thread de processamento da c√¢mera."""
        if self.camera_thread is None or not self.camera_thread.is_alive():
            self.camera_thread = threading.Thread(target=self.backend.video_loop, daemon=True)
            self.camera_thread.start()
            self.start_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
            self.name_label.config(text="Iniciando c√¢mera...")

    def stop_recognition(self):
        """Para o thread de processamento da c√¢mera."""
        self.backend.stop_camera()
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)
        self.name_label.config(text="Status: Parado")

    def update_gui(self, action, message, color=None):
        """
        Callback para atualizar os widgets da GUI a partir do thread de backend.
        CORRE√á√ÉO: Agenda a atualiza√ß√£o na thread principal da GUI.
        """
        if action == "status_update":
            # Agendamos a atualiza√ß√£o para ser executada no pr√≥ximo ciclo do mainloop
            self.after(0, self.status_label.config, {'text': message, 'foreground': color})
        elif action == "name_update":
            self.after(0, self.name_label.config, {'text': message})
        
    def update_frame_display(self):
        """Atualiza a imagem exibida na label de v√≠deo."""
        if self.backend.current_frame is not None:
            # Converte o frame do OpenCV para um formato que o Tkinter pode exibir
            frame = cv2.cvtColor(self.backend.current_frame, cv2.COLOR_BGR2RGB)
            image = Image.fromarray(frame)
            # Redimensiona para caber na janela
            image_tk = ImageTk.PhotoImage(image)
            self.video_label.config(image=image_tk)
            self.video_label.image = image_tk # Mant√©m uma refer√™ncia para evitar garbage collection
        
        # Agenda a pr√≥xima atualiza√ß√£o
        self.after(15, self.update_frame_display)

    def on_closing(self):
        """Fun√ß√£o chamada ao fechar a janela."""
        print("Fechando a janela da aplica√ß√£o.")
        self.backend.shutdown()
        self.destroy()

# ====================================================================
# --- 4. PONTO DE ENTRADA DO SCRIPT ---
# ====================================================================

if __name__ == "__main__":
    app_gui = FaceRecognitionGUI()
    app_gui.mainloop()