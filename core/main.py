# main.py

import cv2                          # Biblioteca OpenCV para exibiÃ§Ã£o de imagem e vÃ­deo
import time                         # Para medir tempo de execuÃ§Ã£o e controlar timeout
import json                         # Para montar mensagens em formato JSON (usado no MQTT)
from datetime import datetime       # Para gerar timestamps

# MÃ³dulos do sistema
from camera import Camera                               # Captura de vÃ­deo com threading
from mqtt_manager import MQTTManager                    # ComunicaÃ§Ã£o MQTT (publicar eventos e comandos)
from face_recognition_module import FaceRecognitionModule  # Reconhecimento facial
from logger import Logger                               # Registro de eventos em CSV
from config import *                                    # ConfiguraÃ§Ãµes gerais do sistema (paths, limites, etc.)
from utils import draw_face_box                         # Desenha caixa e nome sobre o rosto reconhecido


def main():
    # Inicializa os mÃ³dulos principais
    cam = Camera()                       # Gerencia a cÃ¢mera
    mqtt = MQTTManager()                # Gerencia o broker MQTT
    face_module = FaceRecognitionModule()  # ResponsÃ¡vel pelo reconhecimento facial
    logger = Logger()                   # ResponsÃ¡vel por registrar logs

    # VariÃ¡veis de controle do reconhecimento
    last_name = None                    # Ãšltimo nome detectado (nÃ£o confirmado)
    confirmed_name = None               # Nome confirmado apÃ³s vÃ¡rias detecÃ§Ãµes consecutivas
    consecutive = 0                     # Contador de confirmaÃ§Ãµes consecutivas
    last_seen = time.time()             # Timestamp da Ãºltima detecÃ§Ã£o de rosto

    try:
        while True:
            # Marca o tempo de inÃ­cio para cÃ¡lculo de FPS
            start_time = time.time()

            # Captura o frame da cÃ¢mera
            frame = cam.get_frame()
            if frame is None:
                continue  # Pula iteraÃ§Ã£o se o frame ainda nÃ£o estiver disponÃ­vel

            # Tenta reconhecer o rosto presente no frame
            name, location = face_module.recognize(frame)

            # Caso nÃ£o haja rosto detectado, define como "Nenhum Rosto Detectado"
            if not name:
                name = "Nenhum Rosto Detectado"

            # Se hÃ¡ rosto detectado, desenha a caixa no frame
            if name != "Nenhum Rosto Detectado":
                frame = draw_face_box(frame, name, location)

            # === LÃ³gica de controle (debounce) ===
            if name == "Nenhum Rosto Detectado":
                # Se antes havia um rosto confirmado, publica ausÃªncia agora
                if confirmed_name != "Nenhum Rosto Detectado":
                    mqtt.publish(MQTT_TOPIC_STATE, "Nenhum Rosto Detectado")
                    print("ðŸ’¤ Nenhum rosto detectado. Atualizando estado.")
                    confirmed_name = "Nenhum Rosto Detectado"
                    last_name = None
                    consecutive = 0
            else:
                if name == confirmed_name:
                    consecutive = 0  # JÃ¡ estÃ¡ confirmado, nada muda
                elif name == last_name:
                    consecutive += 1  # Mesmo nome detectado novamente

                    # Se atingiu o limiar de confirmaÃ§Ã£o, confirma o nome
                    if consecutive >= CONFIRMATION_THRESHOLD:
                        logger.log(name)  # Registra o reconhecimento
                        mqtt.publish(MQTT_TOPIC_STATE, name)  # Publica nome reconhecido

                        if name != "Desconhecido":
                            # Se reconhecido, envia comando para abrir a porta
                            payload = json.dumps({"command": "open", "user": name})
                            mqtt.publish(MQTT_TOPIC_DOOR_CONTROL, payload)
                            print(f"ðŸŸ¢ LED ON - Porta aberta para {name}")
                        else:
                            # Caso desconhecido, envia alerta
                            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                            alert_payload = json.dumps({
                                "message": "Rosto desconhecido detectado!",
                                "timestamp": timestamp
                            })
                            mqtt.publish(MQTT_TOPIC_ALERT, alert_payload)
                            print("ðŸ”´ LED OFF - Acesso negado (Desconhecido)")

                        confirmed_name = name
                        consecutive = 0
                else:
                    # Novo nome detectado, reinicia contagem
                    last_name = name
                    consecutive = 1

            # Atualiza o tempo do Ãºltimo rosto visto
            if name != "Nenhum Rosto Detectado":
                last_seen = time.time()
            elif time.time() - last_seen > INACTIVITY_TIMEOUT_SECONDS and confirmed_name != "Nenhum Rosto Detectado":
                mqtt.publish(MQTT_TOPIC_STATE, "Nenhum Rosto Detectado")
                confirmed_name = "Nenhum Rosto Detectado"
                print("ðŸ’¤ Timeout de inatividade. Estado atualizado.")

            # === ExibiÃ§Ã£o do FPS no frame ===
            fps = 1.0 / (time.time() - start_time)
            cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

            # Exibe a imagem com OpenCV
            cv2.imshow("Reconhecimento Facial", frame)

            # Encerra o programa se a tecla 'q' for pressionada
            if cv2.waitKey(1) & 0xFF == ord('q'):
                break

    finally:
        # Encerra recursos mesmo se ocorrer erro ou fechamento
        mqtt.disconnect()
        cam.release()
        cv2.destroyAllWindows()

# Executa o programa se este arquivo for o principal
if __name__ == "__main__":
    main()
